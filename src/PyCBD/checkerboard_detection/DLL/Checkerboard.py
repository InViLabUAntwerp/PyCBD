# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Checkerboard
else:
    import _Checkerboard

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Checkerboard.delete_SwigPyIterator

    def value(self):
        return _Checkerboard.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Checkerboard.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Checkerboard.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Checkerboard.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Checkerboard.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Checkerboard.SwigPyIterator_copy(self)

    def next(self):
        return _Checkerboard.SwigPyIterator_next(self)

    def __next__(self):
        return _Checkerboard.SwigPyIterator___next__(self)

    def previous(self):
        return _Checkerboard.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Checkerboard.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Checkerboard.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Checkerboard.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Checkerboard.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Checkerboard.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Checkerboard.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Checkerboard.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Checkerboard:
_Checkerboard.SwigPyIterator_swigregister(SwigPyIterator)
class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Checkerboard.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Checkerboard.vectori___nonzero__(self)

    def __bool__(self):
        return _Checkerboard.vectori___bool__(self)

    def __len__(self):
        return _Checkerboard.vectori___len__(self)

    def __getslice__(self, i, j):
        return _Checkerboard.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Checkerboard.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Checkerboard.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Checkerboard.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Checkerboard.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Checkerboard.vectori___setitem__(self, *args)

    def pop(self):
        return _Checkerboard.vectori_pop(self)

    def append(self, x):
        return _Checkerboard.vectori_append(self, x)

    def empty(self):
        return _Checkerboard.vectori_empty(self)

    def size(self):
        return _Checkerboard.vectori_size(self)

    def swap(self, v):
        return _Checkerboard.vectori_swap(self, v)

    def begin(self):
        return _Checkerboard.vectori_begin(self)

    def end(self):
        return _Checkerboard.vectori_end(self)

    def rbegin(self):
        return _Checkerboard.vectori_rbegin(self)

    def rend(self):
        return _Checkerboard.vectori_rend(self)

    def clear(self):
        return _Checkerboard.vectori_clear(self)

    def get_allocator(self):
        return _Checkerboard.vectori_get_allocator(self)

    def pop_back(self):
        return _Checkerboard.vectori_pop_back(self)

    def erase(self, *args):
        return _Checkerboard.vectori_erase(self, *args)

    def __init__(self, *args):
        _Checkerboard.vectori_swiginit(self, _Checkerboard.new_vectori(*args))

    def push_back(self, x):
        return _Checkerboard.vectori_push_back(self, x)

    def front(self):
        return _Checkerboard.vectori_front(self)

    def back(self):
        return _Checkerboard.vectori_back(self)

    def assign(self, n, x):
        return _Checkerboard.vectori_assign(self, n, x)

    def resize(self, *args):
        return _Checkerboard.vectori_resize(self, *args)

    def insert(self, *args):
        return _Checkerboard.vectori_insert(self, *args)

    def reserve(self, n):
        return _Checkerboard.vectori_reserve(self, n)

    def capacity(self):
        return _Checkerboard.vectori_capacity(self)
    __swig_destroy__ = _Checkerboard.delete_vectori

# Register vectori in _Checkerboard:
_Checkerboard.vectori_swigregister(vectori)
class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Checkerboard.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Checkerboard.vectord___nonzero__(self)

    def __bool__(self):
        return _Checkerboard.vectord___bool__(self)

    def __len__(self):
        return _Checkerboard.vectord___len__(self)

    def __getslice__(self, i, j):
        return _Checkerboard.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Checkerboard.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Checkerboard.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Checkerboard.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Checkerboard.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Checkerboard.vectord___setitem__(self, *args)

    def pop(self):
        return _Checkerboard.vectord_pop(self)

    def append(self, x):
        return _Checkerboard.vectord_append(self, x)

    def empty(self):
        return _Checkerboard.vectord_empty(self)

    def size(self):
        return _Checkerboard.vectord_size(self)

    def swap(self, v):
        return _Checkerboard.vectord_swap(self, v)

    def begin(self):
        return _Checkerboard.vectord_begin(self)

    def end(self):
        return _Checkerboard.vectord_end(self)

    def rbegin(self):
        return _Checkerboard.vectord_rbegin(self)

    def rend(self):
        return _Checkerboard.vectord_rend(self)

    def clear(self):
        return _Checkerboard.vectord_clear(self)

    def get_allocator(self):
        return _Checkerboard.vectord_get_allocator(self)

    def pop_back(self):
        return _Checkerboard.vectord_pop_back(self)

    def erase(self, *args):
        return _Checkerboard.vectord_erase(self, *args)

    def __init__(self, *args):
        _Checkerboard.vectord_swiginit(self, _Checkerboard.new_vectord(*args))

    def push_back(self, x):
        return _Checkerboard.vectord_push_back(self, x)

    def front(self):
        return _Checkerboard.vectord_front(self)

    def back(self):
        return _Checkerboard.vectord_back(self)

    def assign(self, n, x):
        return _Checkerboard.vectord_assign(self, n, x)

    def resize(self, *args):
        return _Checkerboard.vectord_resize(self, *args)

    def insert(self, *args):
        return _Checkerboard.vectord_insert(self, *args)

    def reserve(self, n):
        return _Checkerboard.vectord_reserve(self, n)

    def capacity(self):
        return _Checkerboard.vectord_capacity(self)
    __swig_destroy__ = _Checkerboard.delete_vectord

# Register vectord in _Checkerboard:
_Checkerboard.vectord_swigregister(vectord)
class Checkerboard(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = property(_Checkerboard.Checkerboard_rows_get, _Checkerboard.Checkerboard_rows_set)
    cols = property(_Checkerboard.Checkerboard_cols_get, _Checkerboard.Checkerboard_cols_set)
    number_of_boards = property(_Checkerboard.Checkerboard_number_of_boards_get, _Checkerboard.Checkerboard_number_of_boards_set)
    number_of_corners = property(_Checkerboard.Checkerboard_number_of_corners_get, _Checkerboard.Checkerboard_number_of_corners_set)
    show_processing = property(_Checkerboard.Checkerboard_show_processing_get, _Checkerboard.Checkerboard_show_processing_set)
    show_debug_image = property(_Checkerboard.Checkerboard_show_debug_image_get, _Checkerboard.Checkerboard_show_debug_image_set)
    show_grow_processing = property(_Checkerboard.Checkerboard_show_grow_processing_get, _Checkerboard.Checkerboard_show_grow_processing_set)
    norm = property(_Checkerboard.Checkerboard_norm_get, _Checkerboard.Checkerboard_norm_set)
    polynomial_fit = property(_Checkerboard.Checkerboard_polynomial_fit_get, _Checkerboard.Checkerboard_polynomial_fit_set)
    norm_half_kernel_size = property(_Checkerboard.Checkerboard_norm_half_kernel_size_get, _Checkerboard.Checkerboard_norm_half_kernel_size_set)
    polynomial_fit_half_kernel_size = property(_Checkerboard.Checkerboard_polynomial_fit_half_kernel_size_get, _Checkerboard.Checkerboard_polynomial_fit_half_kernel_size_set)
    init_loc_thr = property(_Checkerboard.Checkerboard_init_loc_thr_get, _Checkerboard.Checkerboard_init_loc_thr_set)
    score_thr = property(_Checkerboard.Checkerboard_score_thr_get, _Checkerboard.Checkerboard_score_thr_set)
    strict_grow = property(_Checkerboard.Checkerboard_strict_grow_get, _Checkerboard.Checkerboard_strict_grow_set)
    overlay = property(_Checkerboard.Checkerboard_overlay_get, _Checkerboard.Checkerboard_overlay_set)
    occlusion = property(_Checkerboard.Checkerboard_occlusion_get, _Checkerboard.Checkerboard_occlusion_set)
    boards = property(_Checkerboard.Checkerboard_boards_get, _Checkerboard.Checkerboard_boards_set)
    radius = property(_Checkerboard.Checkerboard_radius_get, _Checkerboard.Checkerboard_radius_set)
    corners = property(_Checkerboard.Checkerboard_corners_get, _Checkerboard.Checkerboard_corners_set)

    def __init__(self):
        _Checkerboard.Checkerboard_swiginit(self, _Checkerboard.new_Checkerboard())
    __swig_destroy__ = _Checkerboard.delete_Checkerboard

    def array_to_image(self, sizex, h, w):
        return _Checkerboard.Checkerboard_array_to_image(self, sizex, h, w)

    def array_norm_to_image(self, sizex, h, w):
        return _Checkerboard.Checkerboard_array_norm_to_image(self, sizex, h, w)

    def load_image(self, name):
        return _Checkerboard.Checkerboard_load_image(self, name)

    def find_corners(self):
        return _Checkerboard.Checkerboard_find_corners(self)

    def find_board_from_corners(self):
        return _Checkerboard.Checkerboard_find_board_from_corners(self)

    def CalculateRowsCols(self):
        return _Checkerboard.Checkerboard_CalculateRowsCols(self)

    def GetBoardCorners(self, sizex, sizey):
        return _Checkerboard.Checkerboard_GetBoardCorners(self, sizex, sizey)

    def GetCorners(self, sizex, sizey):
        return _Checkerboard.Checkerboard_GetCorners(self, sizex, sizey)

    def GetDirection_U(self, sizex, sizey):
        return _Checkerboard.Checkerboard_GetDirection_U(self, sizex, sizey)

    def GetDirection_V(self, sizex, sizey):
        return _Checkerboard.Checkerboard_GetDirection_V(self, sizex, sizey)

    def GetScore(self, sizex):
        return _Checkerboard.Checkerboard_GetScore(self, sizex)

    def add_corner_naive(self, u, v):
        return _Checkerboard.Checkerboard_add_corner_naive(self, u, v)

    def add_corner(self, u, v, direction_U_u, direction_U_v, direction_V_u, direction_V_v, score):
        return _Checkerboard.Checkerboard_add_corner(self, u, v, direction_U_u, direction_U_v, direction_V_u, direction_V_v, score)

    def refine_corners(self):
        return _Checkerboard.Checkerboard_refine_corners(self)

    def plot_corners(self):
        return _Checkerboard.Checkerboard_plot_corners(self)

    def plot_boards(self):
        return _Checkerboard.Checkerboard_plot_boards(self)

# Register Checkerboard in _Checkerboard:
_Checkerboard.Checkerboard_swigregister(Checkerboard)

